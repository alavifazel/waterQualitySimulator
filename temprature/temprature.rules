rule: {([3] + [6] + max([4],[5]) + min([1],[2])) / 4} 100 { stateCount(?) = 0 and (min([1],[2]) <= 2 + max([4],[5])) }
rule: {([3] + [6] + max([4],[5])) / 3} 100 { stateCount(?) = 0 and (min([1],[2]) > 2 +  max([4],[5])) }
rule: {([3] + [6] + max([4],[5])) / 3} 100 { stateCount(?) = 2 and [1] = ? and [2] = ? }

rule: {([1] + [2] + [3] + [6]) / 4} 100 { stateCount(?) = 2 and [4] = ? and [5] = ? }

rule: {([3] + [4] + [2]) / 3} 100 { stateCount(?) = 3 and [1] = ? and [5] = ? and [6] = ? }
rule: {([1] + [5] + [6]) / 3} 100 { stateCount(?) = 3 and [2] = ? and [3] = ? and [4] = ? }
rule: {([4] + [5] + [6]) / 3} 100 { stateCount(?) = 3 and [1] = ? and [2] = ? and [3] = ? }

rule: {([6] + max([4],[5]) + min([1],[2])) / 3} 100 { stateCount(?) = 1 and [3] = ? }
rule: { ([3] + [6]) / 2 } 100 { stateCount(?)=4 and [1] = ? and [2] = ? and [4] = ? and [5] = ?}
rule: { ([3] + [4]) / 2 } 100 { stateCount(?)=4 and [1] = ? and [2] = ? and [5] = ? and [6] = ?}
rule: { ([5] + [6]) / 2 } 100 { stateCount(?)=4 and [1] = ? and [2] = ? and [3] = ? and [4] = ?}

rule: { ([2] + [3]) / 2 } 100 { stateCount(?)=4 and [1] = ? and [4] = ? and [5] = ? and [6] = ?}
rule: { ([1] + [6]) / 2 } 100 { stateCount(?)=4 and [2] = ? and [3] = ? and [4] = ? and [5] = ?}

rule: {[6]} 100 { stateCount(?)=5 and [1] = ? and [2] = ? and [3] = ? and [4] = ? and [5] = ?}
rule: {[5]} 100 { stateCount(?)=5 and [1] = ? and [2] = ? and [3] = ? and [4] = ? and [6] = ?}
rule: {[4]} 100 { stateCount(?)=5 and [1] = ? and [2] = ? and [3] = ? and [5] = ? and [6] = ?}
rule: {[3]} 100 { stateCount(?)=5 and [1] = ? and [2] = ? and [4] = ? and [5] = ? and [6] = ?}
rule: {[2]} 100 { stateCount(?)=5 and [1] = ? and [3] = ? and [4] = ? and [5] = ? and [6] = ?}
rule: {[1]} 100 { stateCount(?)=5 and [2] = ? and [3] = ? and [4] = ? and [5] = ? and [6] = ?}

rule: {[0]} 100 { t }