rule: {([2] + [3] + [4] + [5] + [6]) / 5 } 100 { stateCount(?)=1 and [1] = ?}
rule: {([1] + [3] + [4] + [5] + [6]) / 5 } 100 { stateCount(?)=1 and [2] = ?}
rule: {([1] + [2] + [4] + [5] + [6]) / 5 } 100 { stateCount(?)=1 and [3] = ?}
rule: {([1] + [2] + [3] + [5] + [6]) / 5 } 100 { stateCount(?)=1 and [4] = ?}
rule: {([1] + [2] + [3] + [4] + [6]) / 5 } 100 { stateCount(?)=1 and [5] = ?}
rule: {([1] + [2] + [3] + [4] + [5]) / 5 } 100 { stateCount(?)=1 and [6] = ?}

rule: {([3] + [4] + [5] + [6]) / 4 } 100 { stateCount(?)=2 and [1] = ? and [2] = ?}
rule: {([2] + [4] + [5] + [6]) / 4 } 100 { stateCount(?)=2 and [1] = ? and [3] = ?}
rule: {([2] + [3] + [5] + [6]) / 4 } 100 { stateCount(?)=2 and [1] = ? and [4] = ?}
rule: {([2] + [3] + [4] + [6]) / 4 } 100 { stateCount(?)=2 and [1] = ? and [5] = ?}
rule: {([2] + [3] + [4] + [5]) / 4 } 100 { stateCount(?)=2 and [1] = ? and [6] = ?}
rule: {([1] + [4] + [5] + [6]) / 4 } 100 { stateCount(?)=2 and [2] = ? and [3] = ?}
rule: {([1] + [3] + [5] + [6]) / 4 } 100 { stateCount(?)=2 and [2] = ? and [4] = ?}
rule: {([1] + [3] + [4] + [6]) / 4 } 100 { stateCount(?)=2 and [2] = ? and [5] = ?}
rule: {([1] + [3] + [4] + [5]) / 4 } 100 { stateCount(?)=2 and [2] = ? and [6] = ?}
rule: {([1] + [2] + [5] + [6]) / 4 } 100 { stateCount(?)=2 and [3] = ? and [4] = ?}
rule: {([1] + [2] + [4] + [6]) / 4 } 100 { stateCount(?)=2 and [3] = ? and [5] = ?}
rule: {([1] + [2] + [4] + [5]) / 4 } 100 { stateCount(?)=2 and [3] = ? and [6] = ?}
rule: {([1] + [2] + [3] + [6]) / 4 } 100 { stateCount(?)=2 and [4] = ? and [5] = ?}
rule: {([1] + [2] + [3] + [5]) / 4 } 100 { stateCount(?)=2 and [4] = ? and [6] = ?}
rule: {([1] + [2] + [3] + [4]) / 4 } 100 { stateCount(?)=2 and [5] = ? and [6] = ?}

rule: {([4] + [5] + [6]) / 3 } 100 { stateCount(?)=3 and [1] = ? and [2] = ? and [3] = ?}
rule: {([3] + [5] + [6]) / 3 } 100 { stateCount(?)=3 and [1] = ? and [2] = ? and [4] = ?}
rule: {([3] + [4] + [6]) / 3 } 100 { stateCount(?)=3 and [1] = ? and [2] = ? and [5] = ?}
rule: {([3] + [4] + [5]) / 3 } 100 { stateCount(?)=3 and [1] = ? and [2] = ? and [6] = ?}
rule: {([2] + [5] + [6]) / 3 } 100 { stateCount(?)=3 and [1] = ? and [3] = ? and [4] = ?}
rule: {([2] + [4] + [6]) / 3 } 100 { stateCount(?)=3 and [1] = ? and [3] = ? and [5] = ?}
rule: {([2] + [4] + [5]) / 3 } 100 { stateCount(?)=3 and [1] = ? and [3] = ? and [6] = ?}
rule: {([2] + [3] + [6]) / 3 } 100 { stateCount(?)=3 and [1] = ? and [4] = ? and [5] = ?}
rule: {([2] + [3] + [5]) / 3 } 100 { stateCount(?)=3 and [1] = ? and [4] = ? and [6] = ?}
rule: {([2] + [3] + [4]) / 3 } 100 { stateCount(?)=3 and [1] = ? and [5] = ? and [6] = ?}
rule: {([1] + [5] + [6]) / 3 } 100 { stateCount(?)=3 and [2] = ? and [3] = ? and [4] = ?}
rule: {([1] + [4] + [6]) / 3 } 100 { stateCount(?)=3 and [2] = ? and [3] = ? and [5] = ?}
rule: {([1] + [4] + [5]) / 3 } 100 { stateCount(?)=3 and [2] = ? and [3] = ? and [6] = ?}
rule: {([1] + [3] + [6]) / 3 } 100 { stateCount(?)=3 and [2] = ? and [4] = ? and [5] = ?}
rule: {([1] + [3] + [5]) / 3 } 100 { stateCount(?)=3 and [2] = ? and [4] = ? and [6] = ?}
rule: {([1] + [3] + [4]) / 3 } 100 { stateCount(?)=3 and [2] = ? and [5] = ? and [6] = ?}
rule: {([1] + [2] + [6]) / 3 } 100 { stateCount(?)=3 and [3] = ? and [4] = ? and [5] = ?}
rule: {([1] + [2] + [5]) / 3 } 100 { stateCount(?)=3 and [3] = ? and [4] = ? and [6] = ?}
rule: {([1] + [2] + [4]) / 3 } 100 { stateCount(?)=3 and [3] = ? and [5] = ? and [6] = ?}
rule: {([1] + [2] + [3]) / 3 } 100 { stateCount(?)=3 and [4] = ? and [5] = ? and [6] = ?}

rule: {([5] + [6]) / 2 } 100 { stateCount(?)=4 and [1] = ? and [2] = ? and [3] = ? and [4] = ?}
rule: {([4] + [6]) / 2 } 100 { stateCount(?)=4 and [1] = ? and [2] = ? and [3] = ? and [5] = ?}
rule: {([4] + [5]) / 2 } 100 { stateCount(?)=4 and [1] = ? and [2] = ? and [3] = ? and [6] = ?}
rule: {([3] + [6]) / 2 } 100 { stateCount(?)=4 and [1] = ? and [2] = ? and [4] = ? and [5] = ?}
rule: {([3] + [5]) / 2 } 100 { stateCount(?)=4 and [1] = ? and [2] = ? and [4] = ? and [6] = ?}
rule: {([3] + [4]) / 2 } 100 { stateCount(?)=4 and [1] = ? and [2] = ? and [5] = ? and [6] = ?}
rule: {([2] + [6]) / 2 } 100 { stateCount(?)=4 and [1] = ? and [3] = ? and [4] = ? and [5] = ?}
rule: {([2] + [5]) / 2 } 100 { stateCount(?)=4 and [1] = ? and [3] = ? and [4] = ? and [6] = ?}
rule: {([2] + [4]) / 2 } 100 { stateCount(?)=4 and [1] = ? and [3] = ? and [5] = ? and [6] = ?}
rule: {([2] + [3]) / 2 } 100 { stateCount(?)=4 and [1] = ? and [4] = ? and [5] = ? and [6] = ?}
rule: {([1] + [6]) / 2 } 100 { stateCount(?)=4 and [2] = ? and [3] = ? and [4] = ? and [5] = ?}
rule: {([1] + [5]) / 2 } 100 { stateCount(?)=4 and [2] = ? and [3] = ? and [4] = ? and [6] = ?}
rule: {([1] + [4]) / 2 } 100 { stateCount(?)=4 and [2] = ? and [3] = ? and [5] = ? and [6] = ?}
rule: {([1] + [3]) / 2 } 100 { stateCount(?)=4 and [2] = ? and [4] = ? and [5] = ? and [6] = ?}
rule: {([1] + [2]) / 2 } 100 { stateCount(?)=4 and [3] = ? and [4] = ? and [5] = ? and [6] = ?}

rule: {([6]) / 1 } 100 { stateCount(?)=5 and [1] = ? and [2] = ? and [3] = ? and [4] = ? and [5] = ?}
rule: {([5]) / 1 } 100 { stateCount(?)=5 and [1] = ? and [2] = ? and [3] = ? and [4] = ? and [6] = ?}
rule: {([4]) / 1 } 100 { stateCount(?)=5 and [1] = ? and [2] = ? and [3] = ? and [5] = ? and [6] = ?}
rule: {([3]) / 1 } 100 { stateCount(?)=5 and [1] = ? and [2] = ? and [4] = ? and [5] = ? and [6] = ?}
rule: {([2]) / 1 } 100 { stateCount(?)=5 and [1] = ? and [3] = ? and [4] = ? and [5] = ? and [6] = ?}
rule: {([1]) / 1 } 100 { stateCount(?)=5 and [2] = ? and [3] = ? and [4] = ? and [5] = ? and [6] = ?}

rule: {([1] + [2] + [3] + [4] + [5] + [6])/6} 100 {t}